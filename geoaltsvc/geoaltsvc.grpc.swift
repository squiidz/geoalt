//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: geoaltsvc.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol GeoAltLoginCall: ClientCallUnary {}

fileprivate final class GeoAltLoginCallBase: ClientCallUnaryBase<LoginReq, LoginResp>, GeoAltLoginCall {
  override class var method: String { return "/GeoAlt/Login" }
}

internal protocol GeoAltRegisterCall: ClientCallUnary {}

fileprivate final class GeoAltRegisterCallBase: ClientCallUnaryBase<RegisterReq, RegisterResp>, GeoAltRegisterCall {
  override class var method: String { return "/GeoAlt/Register" }
}

internal protocol GeoAltGeoFeedCall: ClientCallBidirectionalStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> GetAlertResp?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<GetAlertResp?>) -> Void) throws

  /// Send a message to the stream. Nonblocking.
  func send(_ message: GetAlertReq, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: GetAlertReq, timeout: DispatchTime) throws

  /// Call this to close the sending connection. Blocking.
  func closeSend() throws
  /// Call this to close the sending connection. Nonblocking.
  func closeSend(completion: (() -> Void)?) throws
}

internal extension GeoAltGeoFeedCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> GetAlertResp? { return try self._receive(timeout: timeout) }
}

internal extension GeoAltGeoFeedCall {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: GetAlertReq, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class GeoAltGeoFeedCallBase: ClientCallBidirectionalStreamingBase<GetAlertReq, GetAlertResp>, GeoAltGeoFeedCall {
  override class var method: String { return "/GeoAlt/GeoFeed" }
}

internal protocol GeoAltAddAlertCall: ClientCallUnary {}

fileprivate final class GeoAltAddAlertCallBase: ClientCallUnaryBase<AddAlertReq, AddAlertResp>, GeoAltAddAlertCall {
  override class var method: String { return "/GeoAlt/AddAlert" }
}

internal protocol GeoAltGetAlertCall: ClientCallUnary {}

fileprivate final class GeoAltGetAlertCallBase: ClientCallUnaryBase<GetAlertReq, GetAlertResp>, GeoAltGetAlertCall {
  override class var method: String { return "/GeoAlt/GetAlert" }
}


/// Instantiate GeoAltServiceClient, then call methods of this protocol to make API calls.
internal protocol GeoAltService: ServiceClient {
  /// Synchronous. Unary.
  func login(_ request: LoginReq) throws -> LoginResp
  /// Asynchronous. Unary.
  func login(_ request: LoginReq, completion: @escaping (LoginResp?, CallResult) -> Void) throws -> GeoAltLoginCall

  /// Synchronous. Unary.
  func register(_ request: RegisterReq) throws -> RegisterResp
  /// Asynchronous. Unary.
  func register(_ request: RegisterReq, completion: @escaping (RegisterResp?, CallResult) -> Void) throws -> GeoAltRegisterCall

  /// Asynchronous. Bidirectional-streaming.
  /// Use methods on the returned object to stream messages,
  /// to wait for replies, and to close the connection.
  func geoFeed(completion: ((CallResult) -> Void)?) throws -> GeoAltGeoFeedCall

  /// Synchronous. Unary.
  func addAlert(_ request: AddAlertReq) throws -> AddAlertResp
  /// Asynchronous. Unary.
  func addAlert(_ request: AddAlertReq, completion: @escaping (AddAlertResp?, CallResult) -> Void) throws -> GeoAltAddAlertCall

  /// Synchronous. Unary.
  func getAlert(_ request: GetAlertReq) throws -> GetAlertResp
  /// Asynchronous. Unary.
  func getAlert(_ request: GetAlertReq, completion: @escaping (GetAlertResp?, CallResult) -> Void) throws -> GeoAltGetAlertCall

}

internal final class GeoAltServiceClient: ServiceClientBase, GeoAltService {
  /// Synchronous. Unary.
  internal func login(_ request: LoginReq) throws -> LoginResp {
    return try GeoAltLoginCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func login(_ request: LoginReq, completion: @escaping (LoginResp?, CallResult) -> Void) throws -> GeoAltLoginCall {
    return try GeoAltLoginCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func register(_ request: RegisterReq) throws -> RegisterResp {
    return try GeoAltRegisterCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func register(_ request: RegisterReq, completion: @escaping (RegisterResp?, CallResult) -> Void) throws -> GeoAltRegisterCall {
    return try GeoAltRegisterCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Bidirectional-streaming.
  /// Use methods on the returned object to stream messages,
  /// to wait for replies, and to close the connection.
  internal func geoFeed(completion: ((CallResult) -> Void)?) throws -> GeoAltGeoFeedCall {
    return try GeoAltGeoFeedCallBase(channel)
      .start(metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func addAlert(_ request: AddAlertReq) throws -> AddAlertResp {
    return try GeoAltAddAlertCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func addAlert(_ request: AddAlertReq, completion: @escaping (AddAlertResp?, CallResult) -> Void) throws -> GeoAltAddAlertCall {
    return try GeoAltAddAlertCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func getAlert(_ request: GetAlertReq) throws -> GetAlertResp {
    return try GeoAltGetAlertCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func getAlert(_ request: GetAlertReq, completion: @escaping (GetAlertResp?, CallResult) -> Void) throws -> GeoAltGetAlertCall {
    return try GeoAltGetAlertCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

